#!/usr/bin/python3

"""
    This is post-commit hook

    This hook creates .git/[commit_hash].sql difference file
    Between developer database and remote branch database
    Later during push this file will be applied to branch database

    Source database: pg-dev.[branch_name] is developer database 
    Target database: pg-branch.[branch_name] is remote database for branch

    Also commit will revert if diff file generation fails

    To allow empty commits use:
    git commit --allow-empty -a -m "my commit message"
"""

import sys
import os
import subprocess
from util import color, cmd, get_branch_name, get_commit_hash, undo_commit

commit_hash = get_commit_hash()
print(color.cyan('Commit hash:'), color.yellow(commit_hash))

sql_diff_path = os.path.join(cmd(['pwd']), '.git', 'sql')
if not os.path.exists(sql_diff_path):
    cmd(['mkdir', sql_diff_path])

sql_diff_file = os.path.join(sql_diff_path, commit_hash+'.sql')

branch_name = get_branch_name()
# this variables come from env
# local db
pg_dev_db = branch_name
#pg_dev_db = 'comp1'

pg_dev_hostname = os.getenv('PG_DEV_HOSTNAME')
pg_dev_port = os.getenv('PG_DEV_PORT')
pg_dev_password = os.getenv('PG_DEV_PASSWORD').replace("\"", "\\\"")
pg_dev_username = os.getenv('PG_DEV_USERNAME')

# pg_dev_hostname = '127.0.0.1'
# pg_dev_port = '5432'
# pg_dev_username =  'postgres'
# pg_dev_password = '1234'

# branch db
#pg_branch_name = 'comp2'
pg_branch_db = branch_name
pg_branch_hostname = os.getenv('PG_BRANCH_HOSTNAME')
pg_branch_port = os.getenv('PG_BRANCH_PORT')
pg_branch_password = os.getenv('PG_BRANCH_PASSWORD').replace("\"", "\\\"")
pg_branch_username = os.getenv('PG_BRANCH_USERNAME')

print(color.cyan('PG_BRANCH_HOSTNAME:'), color.yellow(pg_branch_hostname))
print(color.cyan('PG_BRANCH_PORT:'), color.yellow(pg_branch_port))
print(color.cyan('PG_BRANCH_USERNAME:'), color.yellow(pg_branch_username))
print(color.cyan('PG_BRANCH_PASSWORD:'), color.yellow(pg_branch_password))
print(color.cyan('PG_BRANCH_DATABASE:'), color.yellow(pg_branch_db))
print(f'"host={pg_branch_hostname} port={pg_branch_port} dbname={pg_branch_db} user={pg_branch_username} password={pg_branch_password}"')

# pg_branch_hostname = '127.0.0.1'
# pg_branch_port = '5432'
# pg_branch_username = 'postgres'
# pg_branch_password = '1234'

try:
    cmd(['pgquarrel',
        '--file', sql_diff_file,
        # source db
        #'--source-host', pg_dev_hostname,
        #'--source-dbname', pg_dev_db,
        '--source-dbname', f'hostaddr={pg_dev_hostname} port={pg_dev_port} dbname={pg_dev_db} user={pg_dev_username} password={pg_dev_password}',
        # '--source-port', pg_dev_port,
        # '--source-username', pg_dev_username,
        # '--source-no-password', 'true',
        # target db
        '--target-host', pg_branch_hostname,
        # '--target-dbname', pg_branch_db,
        '--target-dbname', f'hostaddr={pg_branch_hostname} port={pg_branch_port} dbname={pg_branch_db} user={pg_branch_username} password={pg_branch_password}',
        # '--target-port', pg_branch_port,
        # '--target-username', pg_branch_username,
        # '--target-no-password', 'true',
        ##
        '--table-partition', 'false',
        '--single-transaction', 'true',
        '--extension', 'true',
        '--function', 'true',
        '--procedure', 'true',
        '--exclude-schema', '^(php_test|ci_test|promo)$',
    ])

    print(color.cyan(cmd(['cat', sql_diff_file])))
    print(color.green(sql_diff_file))

except Exception as e:
    print(color.red('Diff file generation failed, undoing commit...'))
    undo_commit()
    sys.exit(1)

# აქ კარგი იქნებოდა ლოკალურად ბრენჩის შექმნის 
# და ლოკალური ბრენჩის დამერჯვის ფუნქციაც რომ გვქონდეს
# მაგრამ მერე რა ბრანჩს შევადარო ხოლმე კომიტის დროს მიმდინარე ბრენჩი?
# კიარდა როგორ მივხვდე რომ სერვერის ბრანჩს არ უნდა შევადარო და ლოკალურ ბრანჩს უნდა შევადარო
# ჩვეულებრივად კომიტის დროს: 
# ბრანჩის სახელიან ლოკალურ ბაზას ვადარებ სერვერზე არსებულ ბრანჩის სახელიან ბაზას
