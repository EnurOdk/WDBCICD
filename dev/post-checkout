#!/usr/bin/python3

'''
    This hook is run when branch is created
'''

import sys
import os
import socket
import subprocess
from util import color, get_branch_name, get_commit_hash, get_exec_data, get_stdin_input, extract_branch_name, cmd, pg_sync

get_exec_data('DEV_POST_CHECKOUT_HOOK')

# The hook is given three parameters: the ref of the previous HEAD, 
# the ref of the new HEAD (which may or may not have changed), 
# and a flag indicating whether the checkout was a branch checkout (changing branches, flag=1) 
# or a file checkout (retrieving a file from the index, flag=0).
if len(sys.argv)>=4 and sys.argv[1]==sys.argv[2] and sys.argv[3]=='1':
    print(color.cyan('Hashes seem to be equal and checkout type is 1'))

    # We need to create the very first db init file for new branch
    db_check_path = os.path.join(cmd(['pwd']), '.git', 'db')
    if not os.path.exists(db_check_path):
        cmd(['mkdir', db_check_path])
    current_branch = get_branch_name()
    db_init_sql_file = os.path.join(db_check_path, current_branch+'.sql')
    
    # If new branch has no corresponding database created then we do it here
    if current_branch not in ['master', 'staging', 'main'] and not os.path.exists(db_init_sql_file):
        parent_branch = cmd(['git', 'parent'])

        pg_sync(pg_from_env='pg_branch', 
                pg_to_env='pg_dev', # This is only different from pg_branch simmilar hook 
                pg_from_db=parent_branch, 
                pg_to_db=current_branch, 
                pg_sql_file=db_init_sql_file, 
                pg_apply=True, 
                pg_create_from_db=True,
                pg_create_to_db=True)   
        #cmd(['touch', db_init_sql_file])