#!/usr/bin/python3

# GET BRANCH NAME
# git symbolic-ref -q HEAD

import sys
import os
import socket
import subprocess
from util import color, get_branch_name, get_commit_hash, get_stdin_input, extract_branch_name, cmd, pg_sync

print(color.pink('We are in post checkout now!'))
print(color.yellow(str(sys.argv)))

# The hook is given three parameters: the ref of the previous HEAD, 
# the ref of the new HEAD (which may or may not have changed), 
# and a flag indicating whether the checkout was a branch checkout (changing branches, flag=1) 
# or a file checkout (retrieving a file from the index, flag=0).
if len(sys.argv)>=4 and sys.argv[1]==sys.argv[2] and sys.argv[3]=='1':
    print(color.cyan('Hashes seem to be equal and checkout type is 1'))

    # აქ ვადგენ ბაზა არსებობს თუ არ მაგის შესამოწმებელი ფოლდერის მისამართს
    # რატომღაც ადრე გადავწყვიტე რომ ბაზის არსებობა შემემოწმებინა ფაილის არსებობით
    # აა გავიხსენე: ბაზა არსებობს + ბაზა დასასინქია თუ არ პირველჯერად მაგას ვადგენთ
    db_check_path = os.path.join(cmd(['pwd']), '.git', 'db')
    if not os.path.exists(db_check_path):
        cmd(['mkdir', db_check_path])

    # აქ თვითონ ბაზის შესაბამისი ფაილის სახელს მისამართს ვადგენ
    current_branch = get_branch_name()
    db_init_sql_file = os.path.join(db_check_path, current_branch+'.sql')



    print(color.cyan('File to check is'+db_init_sql_file))
    if current_branch not in ['master', 'staging', 'main'] and not os.path.exists(db_init_sql_file):
        print(color.red('We should create a db!'))
        parent_branch = cmd(['git', 'parent'])
        print(color.cyan('From branch: '), color.yellow(parent_branch))
        print(color.cyan('To branch: '), color.yellow(current_branch))
        git_hash = get_commit_hash()
        print(color.cyan('Commit hash'), color.yellow(git_hash))

        pg_sync(pg_from_env='pg_branch', 
                pg_to_env='pg_branch', 
                pg_from_db=parent_branch, 
                pg_to_db=current_branch, 
                pg_sql_file=db_init_sql_file, 
                pg_apply=True, 
                pg_create_from_db=True,
                pg_create_to_db=True)        
        #cmd(['touch', db_init_sql_file])